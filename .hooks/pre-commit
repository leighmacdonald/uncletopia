#!/usr/bin/env python3
from genericpath import isdir
from os import listdir
from os.path import join
import subprocess
import sys

ENCRYPTED_PATH = ["hosts.yml", "group_vars", "host_vars"]


class ValidationError(Exception):
    pass


def repo_dir():
    resp = subprocess.run(["git","rev-parse", "--show-toplevel"], stdout=subprocess.PIPE)
    return resp.stdout.decode('utf-8').rstrip()


ROOT = repo_dir()


def ensure_encrypted():
    def check(fp):
        if header not in open(fp).read():
            raise ValidationError("File should be encrypted with ansible-vault {}".format(fp))

    header = "$ANSIBLE_VAULT"
    for root_dir in ENCRYPTED_PATH:
        if isdir(join(ROOT, root_dir)):
            for file in [f for f in listdir(join(ROOT, root_dir)) if not f.endswith(".example")]:
                check(join(ROOT, root_dir, file))
        else:
            check(join(ROOT, root_dir))
    return True


def ensure_ansible_lint():
    return False


def main():
    ret_val = 255
    try:
        ensure_encrypted()
        ensure_ansible_lint()
    except ValidationError as err:
        print("[ERROR] {}".format(err))
        ret_val = 1
    else:
        ret_val = 0
    finally:
        return ret_val


if __name__ == "__main__":
    sys.exit(main())
