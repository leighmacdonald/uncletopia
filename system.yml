---
- name: System Setup
  hosts: all
  become: true
  tasks:
    - name: Set a hostname
      ansible.builtin.hostname:
        name: "{{ inventory_hostname }}"

    - name: Set timezone
      community.general.timezone:
        name: "{{ timezone }}"

    - name: Check if i386 is enabled
      ansible.builtin.shell: dpkg --print-foreign-architectures | grep i386  # noqa risky-shell-pipe
      register: result_i386_check
      changed_when: result_i386_check.rc == 1
      failed_when: result_i386_check.rc > 1
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

    - name: Install .net repo
      ansible.builtin.apt:
        deb: https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb

#    - name: xanmod-kernel
#      block:
#        - name: Download xanmod gpg key
#          get_url:
#            url: https://dl.xanmod.org/archive.key
#            dest: /usr/share/keyrings/xanmod.gpg_armored
#            checksum: sha256:f5f465c1abecdafb2f066046a834140d3085c227b1d53fa9232a4f338749fbc5
#
#        - name: De-Armor xanmod GPG key
#          shell: gpg --dearmor < /usr/share/keyrings/xanmod.gpg_armored > /usr/share/keyrings/xanmod-archive-keyring.gpg
#          no_log: true
#          args:
#            creates: /usr/share/keyrings/docker-archive-keyring.gpg
#
#        - name: Add xanmod apt source
#          ansible.builtin.apt_repository:
#            repo: "deb [signed-by=/usr/share/keyrings/xanmod-archive-keyring.gpg] http://deb.xanmod.org releases main"
#            state: present

    - name: Configure cpufrequtils
      become: true
      ansible.builtin.copy:
        dest: "/etc/default/cpufrequtils"
        mode: '0755'
        content: |
          GOVERNOR="performance"

    - name: Download docker gpg key
      become: true
      become_user: root
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add specified repository into sources list
      become: true
      become_user: root
      ansible.builtin.apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Enable i386 architecture # noqa no-changed-when
      ansible.builtin.command: dpkg --add-architecture i386
      when: result_i386_check.rc == 1

#    - name: Setup rsyslog
#      #become: true
#      ansible.builtin.import_role:
#        name: hadret.rsyslog
#      tags:
#        - promtail
#        - rsyslog

    - name: Install gpg & dd dependencies
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 0
        state: present
        pkg:
          - unzip
          - gpg
          - cpufrequtils
          - dotnet-sdk-6.0
          - python3-netaddr
          - wget
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - python3-docker
          - libc6:i386
          - lib32stdc++6
          - docker-buildx-plugin
          - rsync

    - name: Install extra OS Dependencies (<24.04)
      when: ansible_distribution == 'Ubuntu' and ansible_distribution_version != '24.04'
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 0
        state: present
        pkg:
          # Doesnt exist on newer distro versions
          - python3-distutils

    - name: Install ansible dependencies on metrics host
      when: ansible_distribution == 'Ubuntu' and ansible_hostname == metrics_hostname
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 0
        state: present
        pkg:
          # Doesnt exist on newer distro versions
          - ansible-core

#    - name: Install xanmod-rt-v2
#      when: old_cpu
#      ansible.builtin.apt:
#        state: present
#        pkg:
#          - linux-xanmod-rt-x64v2
#
#    - name: Install xanmod-rt-v3
#      when: not old_cpu
#      ansible.builtin.apt:
#        state: present
#        pkg:
#          - linux-xanmod-rt-x64v3

    - name: Create dd if it does not exist
      become: true
      become_user: tf2server
      ansible.builtin.file:
        path: ~/dd
        state: directory
        mode: '0755'

    - name: Get dd
      become: true
      become_user: tf2server
      ansible.builtin.unarchive:
        remote_src: true
        src: "https://github.com/SteamRE/DepotDownloader/releases/download/DepotDownloader_2.5.0/depotdownloader-2.5.0.zip"
        dest: ~/dd
        creates: ~/dd/DepotDownloader.dll

    - name: Create rcon directory if it does not exist
      ansible.builtin.file:
        path: ~/rcon
        state: directory
        mode: '0755'

    - name: Reload systemd daemon
      become: true
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Add docker group to user
      become: true
      ansible.builtin.user:
        name: tf2server
        groups: docker
        append: true

    - name: Disable irqbalance # noqa: ignore-errors
      become: true
      ignore_errors: true
      ansible.builtin.systemd:
        name: irqbalance
        state: stopped
        masked: true
        enabled: false

    # ondemand service will force ondemand
    - name: Disable ondemand   # noqa ignore-errors
      become: true
      ignore_errors: true
      ansible.builtin.systemd:
        name: ondemand
        state: stopped
        masked: true
        enabled: false

#    - name: Disable irqbalance  # noqa ignore-errors
#      become: true
#      ignore_errors: true
#      ansible.builtin.systemd:
#        name: irqbalance
#        state: stopped
#        masked: true
#        enabled: false

    - name: Enable docker service
      become: true
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: true

    - name: Enable UFW
      become: true
      community.general.ufw:
        state: enabled
        policy: deny
      when: ansible_distribution == 'Ubuntu'

    - name: Create node_exporter container
      community.docker.docker_container:
        name: node_exporter
        image: prom/node-exporter:latest
        restart_policy: unless-stopped
        restart: true
        pull: true
        volumes:
          - "/:/host:ro,rslave"
        command:
          - "--path.rootfs=/host"
        ports:
          - "{{ wireguard_address_ip | default(ip) }}:9100:9100"
        labels:
          logging: "promtail"
          logging_jobname: "containerlogs"
      tags:
        - metrics-client
        - node_exporter

    - name: Allow node_exporter firewall
      become: true
      community.general.ufw:
        interface_in: "wg0"
        rule: allow
        port: "9100"
        proto: tcp
