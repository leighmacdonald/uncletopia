---
- name: Create srcds root
  ansible.builtin.file:
    path: ~/steamcmd
    state: directory
    mode: "0755"

- name: Install steamcmd
  ansible.builtin.unarchive:
    src: https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz
    dest: ~/steamcmd
    remote_src: true
    creates: ~/steamcmd/steamcmd.sh

- name: Generate steamcmd update script
  ansible.builtin.template:
    src: tf2_ds.txt.j2
    dest: ~/steamcmd/tf2_ds-{{ item.server_name_short }}.txt
    mode: "0755"
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: Download TF2 Base
  ansible.builtin.command:
    cmd: ./steamcmd.sh +runscript tf2_ds-{{ item.server_name_short }}.txt # noqa no-changed-when
    chdir: ~/steamcmd
  loop: "{{ services }}"
  loop_control:
    index_var: loop0
  tags:
    - game_engine

- name: Make steam folder
  ansible.builtin.file:
    path: "~/.steam/sdk32"
    state: 'directory'
    mode: '0755'

- name: Symlink steamclient.so
  ansible.builtin.file:
    src: '~/steamcmd/linux32/steamclient.so'
    dest: "~/.steam/sdk32/steamclient.so"
    state: link

- name: Install a list of packages (<24.04)
  become: true
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version != "24.04"
  ansible.builtin.apt:
    pkg:
      - lib32z1
      - libncurses5:i386
      - libbz2-1.0:i386
      - lib32gcc-s1
      - lib32stdc++6
      - libtinfo5:i386
      - libcurl3-gnutls:i386
      - libsdl2-2.0-0:i386
      - libtinfo5:i386
      - libcurl4:i386
      - libstdc++6:i386
      - libcurl4-gnutls-dev:i386
      - tmux

# Required for libncurses5:i386
- name: Add specified repository into sources list
  become: true
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == "24.04"
  ansible.builtin.apt_repository:
    repo: deb https://security.ubuntu.com/ubuntu focal-security main universe
    state: present

- name: Install a list of packages (24.04)
  become: true
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == "24.04"
  ansible.builtin.apt:
    update_cache: true
    pkg:
      - lib32z1
      - libncurses5:i386
      - libbz2-1.0:i386
      - lib32gcc-s1
      - lib32stdc++6
      - libtinfo5:i386
      - libcurl3t64-gnutls
      - libsdl2-2.0-0:i386
      - libtinfo5:i386
      - libcurl4:i386
      - libstdc++6:i386
      - libcurl4-gnutls-dev:i386
      - tmux

- name: Cleanup existing sourcemod plugins dif
  ansible.builtin.file:
    state: absent
    path: /home/tf2server/srcds-{{ item.server_name_short }}/tf/addons/sourcemod/plugins/
  loop: "{{ services }}"

- name: Cleanup existing sourcemod extensions dif
  ansible.builtin.file:
    state: absent
    path: /home/tf2server/srcds-{{ item.server_name_short }}/tf/addons/sourcemod/extensions/
  loop: "{{ services }}"

- name: Build sourcemod
  ansible.builtin.include_role:
    name: sourcemod

- name: Copy sourcemod distribution to /tf
  ansible.posix.synchronize:
    src: /home/tf2server/build_sourcemod/
    dest: /home/tf2server/srcds-{{ item.server_name_short }}/tf/
    recursive: true
  loop: "{{ services }}"
  # Perform the copy from the *remote* sourcemod build output
  delegate_to: "{{ inventory_hostname }}"

- name: Copy navmeshes /tf/maps/
  ansible.builtin.copy:
    src: "{{ role_path }}/files/navmeshes/"
    dest: /home/tf2server/srcds-{{ item.server_name_short }}/tf/maps/
    mode: "0775"
  loop: "{{ services }}"
  when: item.config == "pve"
  # Perform the copy from the *remote* sourcemod build output
  # delegate_to: "{{ inventory_hostname }}"

- name: Copy vscripts /tf/scripts/
  ansible.builtin.copy:
    src: "{{ role_path }}/files/scripts/"
    dest: /home/tf2server/srcds-{{ item.server_name_short }}/tf/scripts/
    mode: "0775"
  loop: "{{ services }}"
  when: item.config == "pve"
  # Perform the copy from the *remote* sourcemod build output
  # delegate_to: "{{ inventory_hostname }}"

- name: Copy attach.sh
  ansible.builtin.copy:
    src: "{{ role_path }}/files/attach.sh"
    dest: /home/tf2server/srcds-{{ item.server_name_short }}/attach.sh
    mode: "0755"
  loop: "{{ services }}"

- name: Generate /tf/mapcycle.txt
  ansible.builtin.template:
    src: mapcycle.txt.j2
    dest: ~/srcds-{{ item.server_name_short }}/tf/mapcycle.txt
    mode: "0655"
  tags:
    - game_config
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: Generate curated_maplist.txt
  ansible.builtin.template:
    src: curated_maplist.txt.j2
    dest: ~/srcds-{{ item.server_name_short }}/tf/addons/sourcemod/configs/curated_maplist.txt
    mode: "0655"
  when: item.curated_pool
  tags:
    - game_config
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: Generate /tf/item_whitelist.txt
  ansible.builtin.template:
    src: item_whitelist.txt.j2
    dest: ~/srcds-{{ item.server_name_short }}/tf/item_whitelist.txt
    mode: "0655"
  tags:
    - game_config
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: Generate /tf/addons/sourcemod/configs/maplists.cfg
  ansible.builtin.template:
    src: maplists.cfg.j2
    dest: ~/srcds-{{ item.server_name_short }}/tf/addons/sourcemod/configs/maplists.cfg
    mode: "0655"
  tags:
    - game_config
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: Generate /tf/addons/sourcemod/configs/databases.cfg
  ansible.builtin.template:
    src: databases.cfg.j2
    dest: ~/srcds-{{ item.server_name_short }}/tf/addons/sourcemod/configs/databases.cfg
    mode: "0655"
  tags:
    - game_config
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: Generate /tf/cfg/autoexec.cfg
  ansible.builtin.template:
    src: autoexec.cfg.j2
    dest: ~/srcds-{{ item.server_name_short }}/tf/cfg/autoexec.cfg
    mode: "0655"
  tags:
    - game_config
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: Generate /tf/cfg/server.cfg
  ansible.builtin.template:
    src: server.cfg.j2
    dest: ~/srcds-{{ item.server_name_short }}/tf/cfg/server.cfg
    mode: "0655"
  tags:
    - game_config
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: Generate /tf/cfg/motd.cfg
  ansible.builtin.template:
    src: motd.txt.j2
    dest: ~/srcds-{{ item.server_name_short }}/tf/cfg/motd.txt
    mode: "0655"
  tags:
    - game_config
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: Generate /tf/addons/sourcemod/configs/core.cfg
  ansible.builtin.template:
    src: core.cfg.j2
    dest: ~/srcds-{{ item.server_name_short }}/tf/addons/sourcemod/configs/core.cfg
    mode: "0655"
  tags:
    - game_config
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: Generate /tf/addons/sourcemod/configs/discord.cfg
  ansible.builtin.template:
    src: discord.cfg.j2
    dest: ~/srcds-{{ item.server_name_short }}/tf/addons/sourcemod/configs/discord.cfg
    mode: "0655"
  tags:
    - game_config
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: Generate /tf/addons/sourcemod/configs/tf_engipve.cfg
  ansible.builtin.template:
    src: tf_engipve.cfg.j2
    dest: ~/srcds-{{ item.server_name_short }}/tf/addons/sourcemod/configs/tf_engipve.cfg
    mode: "0655"
  tags:
    - game_config
  loop: "{{ services }}"
  when: item.config == 'pve'
  loop_control:
    index_var: loop0

- name: Generate /tf/cfg/sourcemod/gbans.cfg
  ansible.builtin.template:
    src: gbans.cfg.j2
    dest: ~/srcds-{{ item.server_name_short }}/tf/cfg/sourcemod/gbans.cfg
    mode: "0655"
  tags:
    - game_config
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: Generate /tf/cfg/sourcemod/basevotes.cfg
  ansible.builtin.template:
    src: basevotes.cfg.j2
    dest: ~/srcds-{{ item.server_name_short }}/tf/cfg/sourcemod/basevotes.cfg
    mode: "0655"
  tags:
    - game_config
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: Generate /tf/cfg/sourcemod/funvotes.cfg
  ansible.builtin.template:
    src: funvotes.cfg.j2
    dest: ~/srcds-{{ item.server_name_short }}/tf/cfg/sourcemod/funvotes.cfg
    mode: "0655"
  tags:
    - game_config
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: Generate /tf/cfg/sourcemod/mapchooser.cfg
  ansible.builtin.template:
    src: mapchooser.cfg.j2
    dest: ~/srcds-{{ item.server_name_short }}/tf/cfg/sourcemod/mapchooser.cfg
    mode: "0755"
  tags:
    - game_config
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: Generate /tf/cfg/sourcemod/nativevotes.cfg
  ansible.builtin.template:
    src: nativevotes.cfg.j2
    dest: ~/srcds-{{ item.server_name_short }}/tf/cfg/sourcemod/nativevotes.cfg
    mode: "0755"
  tags:
    - game_config
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: Generate /tf/cfg/sourcemod/randomcycle.cfg
  ansible.builtin.template:
    src: randomcycle.cfg.j2
    dest: ~/srcds-{{ item.server_name_short }}/tf/cfg/sourcemod/randomcycle.cfg
    mode: "0755"
  tags:
    - game_config
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: Generate /tf/cfg/mapconfig/gametype/pl.cfg
  ansible.builtin.template:
    src: pl.cfg.j2
    dest: ~/srcds-{{ item.server_name_short }}/tf/cfg/mapconfig/gametype/pl.cfg
    mode: "0775"
  tags:
    - game_config
  when: item.config == 'stopwatch'
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: Generate /tf/cfg/mapconfig/gametype/workshop/pl.cfg
  ansible.builtin.template:
    src: pl.cfg.j2
    dest: ~/srcds-{{ item.server_name_short }}/tf/cfg/mapconfig/gametype/workshop/pl.cfg
    mode: "0775"
  tags:
    - game_config
  when: item.config == 'stopwatch'
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: Generate /tf/cfg/sourcemod/rtv.cfg
  ansible.builtin.template:
    src: rtv.cfg.j2
    dest: ~/srcds-{{ item.server_name_short }}/tf/cfg/sourcemod/rtv.cfg
    mode: "0775"
  tags:
    - game_config
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: Generate /tf/cfg/sourcemod/sourcemod.cfg
  ansible.builtin.template:
    src: sourcemod.cfg.j2
    dest: ~/srcds-{{ item.server_name_short }}/tf/cfg/sourcemod/sourcemod.cfg
    mode: "0755"
  tags:
    - game_config
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: Generate /tf/cfg/sourcemod/stac.cfg
  ansible.builtin.template:
    src: stac.cfg.j2
    dest: ~/srcds-{{ item.server_name_short }}/tf/cfg/sourcemod/stac.cfg
    mode: "0755"
  tags:
    - game_config
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: Generate /tf/cfg/sourcemod/networktools.cfg
  ansible.builtin.template:
    src: networktools.cfg.j2
    dest: ~/srcds-{{ item.server_name_short }}/tf/cfg/sourcemod/networktools.cfg
    mode: "0755"
  tags:
    - game_config
  loop: "{{ services }}"
  when: item.config != "pve"
  loop_control:
    index_var: loop0

- name: Install PVE Map Configs
  ansible.posix.synchronize:
    src: /home/tf2server/build_sourcemod/cfg/mapconfig_pve/
    dest: /home/tf2server/srcds-{{ item.server_name_short }}/tf/cfg/mapconfig/
    recursive: true
  loop: "{{ services }}"
  when: item.config == "pve"
  # Perform the copy from the *remote* sourcemod build output
  delegate_to: "{{ inventory_hostname }}"

- name: Generate /tf/cfg/sourcemod/discord_accelerator.cfg
  ansible.builtin.template:
    src: discord_accelerator.cfg.j2
    dest: "~/srcds-{{ item.server_name_short }}/tf/cfg/sourcemod/discord_accelerator.cfg"
    mode: "0755"
  tags:
    - game_config
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: Disable stripper for non-1ku
  ansible.builtin.file:
    path: /home/tf2server/srcds-{{ item.server_name_short }}/tf/addons/metamod/stripper.vdf
    state: absent
  loop: "{{ services }}"
  when: item.config != "pve"

- name: Generate /entry.sh
  ansible.builtin.template:
    src: "entry.sh.j2"
    dest: "~/srcds-{{ item.server_name_short }}/entry.sh"
    mode: "0775"
  tags:
    - game_config
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: Generate stop.sh
  ansible.builtin.template:
    src: "stop.sh.j2"
    dest: "~/srcds-{{ item.server_name_short }}/stop.sh"
    mode: "0775"
  tags:
    - game_config
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: Allow game port
  become: true
  community.general.ufw:
    rule: allow
    port: "{{ srcds_base_port + (loop0 * 10) }}"
    proto: udp
  loop: "{{ services }}"
  loop_control:
    index_var: loop0
  when: ansible_distribution == 'Ubuntu'

- name: Deny external RCON (VPN)
  become: true
  community.general.ufw:
    rule: deny
    port: "{{ srcds_base_port + (loop0 * 10) }}"
    proto: tcp
  loop: "{{ services }}"
  loop_control:
    index_var: loop0
  when: ansible_distribution == 'Ubuntu'

- name: Allow external RCON (WAN) # noqa: ignore-errors
  become: true
  ignore_errors: true
  community.general.ufw:
    rule: allow
    src: "{{ hostvars[metrics_hostname].ip }}"
    port: "{{ srcds_base_port + (loop0 * 10) }}"
    proto: tcp
  loop: "{{ services }}"
  loop_control:
    index_var: loop0
  when: ansible_distribution == 'Ubuntu'

- name: Allow external RCON (WAN) # noqa: ignore-errors
  become: true
  ignore_errors: true
  community.general.ufw:
    rule: allow
    src: "{{ hostvars[metrics_hostname].service_ip }}"
    port: "{{ srcds_base_port + (loop0 * 10) }}"
    proto: tcp
  loop: "{{ services }}"
  loop_control:
    index_var: loop0
  when: ansible_distribution == 'Ubuntu'

- name: Allow RCON over VPN # noqa: ignore-errors
  become: true
  ignore_errors: true
  community.general.ufw:
    rule: allow
    src: "{{ vpn_mask }}"
    port: "{{ srcds_base_port + (loop0 * 10) }}"
    proto: tcp
  loop: "{{ services }}"
  loop_control:
    index_var: loop0
  when: ansible_distribution == 'Ubuntu'

- name: Allow SourceTV
  become: true
  community.general.ufw:
    rule: allow
    port: "{{ srcds_base_port + (loop0 * 10) + 1 }}"
    proto: udp
  loop: "{{ services }}"
  loop_control:
    index_var: loop0
  when: ansible_distribution == 'Ubuntu'

- name: Allow SRCDS client outbound
  become: true
  community.general.ufw:
    rule: allow
    port: "{{ srcds_base_port + (loop0 * 10) + 2 }}"
    proto: udp
    direction: out
  loop: "{{ services }}"
  loop_control:
    index_var: loop0
  when: ansible_distribution == 'Ubuntu'

- name: Cron srcds
  become: true
  ansible.builtin.cron:
    name: "tf2-restart-{{ item.server_name_short }}"
    weekday: "*"
    minute: "0"
    hour: "6"
    job: "systemctl restart srcds-{{ item.server_name_short }}"
  loop: "{{ services }}"
  loop_control:
    index_var: loop0
  when: ansible_distribution == 'Ubuntu'
  tags: cron

- name: Generate srcds services
  become: true
  ansible.builtin.template:
    src: "srcds.service.j2"
    dest: "/etc/systemd/system/srcds-{{ item.server_name_short }}.service"
    mode: "0775"
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: Reload systemd
  become: true
  ansible.builtin.systemd:
    daemon_reload: true
  tags:
    - game_engine

- name: Enable srcds
  become: true
  ansible.builtin.systemd:
    name: "srcds-{{ item.server_name_short }}"
    enabled: true
    force: true
    state: restarted
    no_block: true
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: Configure logrotate
  become: true
  ansible.builtin.copy:
    dest: /etc/logrotate.d/srcds-{{ item.server_name_short }}
    mode: '0755'
    content: |
      /home/{{ srcds_user }}/srcds-{{ item.server_name_short }}/tf/logs/*.log
      {
        daily
        missingok
        notifempty
        rotate 7
      }
  loop: "{{ services }}"
  loop_control:
    index_var: loop0

- name: Cron clean-stv
  become: true
  ansible.builtin.cron:
    name: "srcds-clean-stv-{{ item.server_name_short }}"
    weekday: "*"
    minute: "0"
    hour: "*"
    month: "*"
    job: "find /home/{{ srcds_user }}/srcds-{{ item.server_name_short }}/tf/stv_demos/complete -type f -mtime +12 -delete"
  loop: "{{ services }}"
  loop_control:
    index_var: loop0
  when: ansible_distribution == 'Ubuntu'
  tags: cron
