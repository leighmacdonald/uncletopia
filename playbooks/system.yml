---
- hosts: all
  become: true
  tasks:
    - name: Set timezone
      community.general.timezone:
        name: "{{ timezone }}"

    - name: Check if i386 is enabled
      ansible.builtin.shell: dpkg --print-foreign-architectures | grep i386
      register: result_i386_check
      changed_when: result_i386_check.rc == 1
      failed_when: result_i386_check.rc > 1
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

    - name: Install .net repo
      ansible.builtin.apt:
        deb: https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb

    - name: Configure cpufrequtils
      become: true
      ansible.builtin.copy:
        dest: "/etc/default/cpufrequtils"
        content: |
          GOVERNOR="performance"

    - name: Enable i386 architecture
      ansible.builtin.command: dpkg --add-architecture i386
      when: result_i386_check.rc == 1

    - name: Install gpg & dd dependencies
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 0
        state: present
        pkg:
          - unzip
          - gpg
          - cpufrequtils
          - dotnet-sdk-6.0
          - python3-netaddr

    - name: Create dd if it does not exist
      become: true
      become_user: tf2server
      ansible.builtin.file:
        path: ~/dd
        state: directory
        mode: '0755'

    - name: Get dd
      become: true
      become_user: tf2server
      ansible.builtin.unarchive:
        remote_src: true
        src: "https://github.com/SteamRE/DepotDownloader/releases/download/DepotDownloader_2.5.0/depotdownloader-2.5.0.zip"
        dest: ~/dd
        creates: ~/dd/DepotDownloader.dll

    - name: Create rcon directory if it does not exist
      ansible.builtin.file:
        path: ~/rcon
        state: directory
        mode: '0755'

    - name: Download docker gpg key
      become: true
      become_user: root
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add specified repository into sources list
      become: true
      become_user: root
      ansible.builtin.apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Install OS Dependencies
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 0
        state: present
        pkg:
          - wget
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - python3-docker
          - python3-distutils
          - libc6:i386
          - lib32stdc++6

    - name: Reload systemd daemon
      become: true
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Add docker group to user
      become: true
      ansible.builtin.user:
        name: '{{ ansible_user }}'
        groups: docker
        append: true

    - name: Disable irqbalance
      become: true
      ansible.builtin.systemd:
        name: irqbalance
        state: stopped
        masked: true
        enabled: false

    # ondemand service will force ondemand
    - name: Disable ondemand
      become: true
      ignore_errors: true
      ansible.builtin.systemd:
        name: ondemand
        state: stopped
        masked: true
        enabled: false

    - name: Disable irqbalance
      become: true
      ignore_errors: true
      ansible.builtin.systemd:
        name: irqbalance
        state: stopped
        masked: true
        enabled: false

    - name: Enable docker service
      become: true
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: true

    - name: Enable UFW
      become: true
      ansible.builtin.ufw:
        state: enabled
        policy: deny
      when: ansible_distribution == 'Ubuntu'
