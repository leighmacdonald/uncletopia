"Games"
{
    "tf"
    {
        "Functions"
        {
            // int thiscall CNetChan::ProcessPacket(CNetChan *, netadr_s *, bool)
            "CNetChan::ProcessPacket"
            {
                "signature"     "CNetChan::ProcessPacket"
                "callconv"      "thiscall"
                "return"        "void"
                "this"          "address"
                "arguments"
                {
                    "netpacket_t"
                    {
                        "type"      "objectptr"
                    }
                    "bool"
                    {
                        "type"      "bool"
                    }
                }
            }
            // void CBasePlayer::ProcessUsercmds(CBasePlayer* this, CUserCmd* ucmd, int numcmd, int totalcmd, int unknown, bool unknown)
            "CBasePlayer::ProcessUsercmds"
            {
                "signature"     "CBasePlayer::ProcessUsercmds"
                "callconv"      "thiscall"
                "return"        "void"
                "this"          "entity" // CBasePlayer*
                "arguments"
                {
                    "ucmd"
                    {
                        "type"      "objectptr"
                    }
                    "numcmds"
                    {
                        "type"      "int"
                    }
                    "totalcmds"
                    {
                        "type"      "int"
                    }
                    "unk_int"
                    {
                        "type"      "int"
                    }
                    "unk_bool"
                    {
                        "type"      "bool"
                    }
                }
            }
            
            // char *__cdecl CVEngineServer::GetClientConVarValue(CVEngineServer *this, int clientIdx, const char * cvarName)
            "CVEngineServer::GetClientConVarValue"
            {
                "signature"     "CVEngineServer::GetClientConVarValue"
                "callconv"      "thiscall"
                "return"        "charptr"
                "this"          "address"
                "arguments"
                {
                    "clientIdx"
                    {
                        "type"      "int"
                    }
                    "cvarName"
                    {
                        "type"      "charptr"
                    }
                }
            }

        }

        "Signatures"
        {
            /*
                "Packet from %s after processing time exceeded (%d bytes pkt), aborting"
            */
            "CNetChan::ProcessPacket"
            {
                "library"   "engine"
                "linux"     "@_ZN8CNetChan13ProcessPacketEP11netpacket_sb"
                "windows"   "\x55\x8B\xEC\x83\xEC\x08\x53\x56\x8B\x75\x08\x83\x7E\x24\x00"
            }

            /*
                "CBasePlayer::ChangeTeam( %d )" - 2 in vtable from that func
                int __thiscall sub_102E5310(_DWORD *this, int a2, int a3, int a4, int a5, char a6)
            */
            "CBasePlayer::ProcessUsercmds"
            {
                "library"   "server"
                "linux"     "@_ZN11CBasePlayer15ProcessUsercmdsEP8CUserCmdiiib"
                "windows"   "\x55\x8B\xEC\x83\xEC\x10\x53\x8B\xD9\x56\x57\xFF\xB3\xCC\x0C\x00\x00"
            }
            // "GetClientConVarValue: player invalid index %i\n"
            "CVEngineServer::GetClientConVarValue"
            {
                "library"   "engine"
                "linux"     "@_ZN14CVEngineServer20GetClientConVarValueEiPKc"
                "windows"   "\x55\x8B\xEC\x8B\x4D\x08\x83\xF9\x01\x7C\x2A\x3B\x0D\x2A\x2A\x2A\x2A\x7F\x2A\xA1\x2A\x2A\x2A\x2A\xFF\x75\x0C"
            }
        }

        "Offsets"
        {
            /*
                    ; Attributes: bp-based frame

                    ; bool __cdecl CBaseClient::IsConnected(CBaseClient *this)
                    _ZNK11CBaseClient11IsConnectedEv proc near

                    this= dword ptr  8

                    000 push    ebp
                    004 mov     ebp, esp
                    004 mov     eax, [ebp+this]
                    004 pop     ebp
                    000 cmp     dword ptr [eax+0C8h], 1
                    000 setnle  al  ;          ^^^^
                    000 retn

                    _ZNK11CBaseClient11IsConnectedEv endp


                _ZN11CBaseClient13FireGameEventEP10IGameEvent has "FireGameEvent"
                something something look thru the vtables

                idk. find one of these. that's how i did it. they all compare against signonstate
                CBaseClient::IsConnected()  const
                CBaseClient::IsSpawned()    const
                CBaseClient::IsActive()     const

                ; bool __thiscall sub_1007F080(_DWORD *this)
                sub_1007F080 proc near
                    cmp     dword ptr [ecx+0C4h], 2
                    setnl   al
                    retn
                sub_1007F080 endp

                bool __thiscall sub_1007F080(_DWORD *this)
                {
                    ;           vvvv * 4 = 0xC4
                    return this[0x31] >= 2;
                }
            */
            "Offset_SignonState"
            {
                "linux"     "0xC8"
                "windows"   "0xC4"
            }

            /*

                IDA says that signon state is 0x32 (* 4)...?
                But GDB says that we need to subtract 4 from our IClient ptr
                I don't know why this is, but it's probably dumb shit with multiple inheritance or something

            */
            "Offset_IClient_HACK"
            {
                "linux"     "4"
                "windows"   "0"
            }

            "CBaseClient::GetPlayerSlot"
            {
                "linux"     "15"
                // annoying offset to get that i'm just trusting nosoop to be correct on (it doesn't crash):
                //     "find SV_BroadcastVoiceData via string xref "Sending voice from: %s - playerslot: %d"
                //     virtual calls made prior to that (call dword ptr [eax+38h] on windows, buncha machinery comparing to _ZThn4_NK11CBaseClient13GetPlayerSlotEv on linux)"
                "windows"   "14"
            }
            "CNetChan::GetTimeSinceLastReceived"
            {
                "linux"     "21"
                "windows"   "21"
            }
            "CNetChan::GetMsgHandler"
            {
                "linux"     "47"
                "windows"   "46"
            }
        }
    }
}
